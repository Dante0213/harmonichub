
name: Deploy to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          echo "의존성 설치 완료"
        
      - name: Debug environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Directory contents:"
          ls -la
          echo "Package.json 내용:"
          cat package.json
          
      # 빌드 과정에서 메모리 문제를 해결하기 위해 NODE_OPTIONS 환경 변수 설정
      - name: Build with increased memory
        run: |
          export NODE_OPTIONS="--max-old-space-size=8192"
          export GENERATE_SOURCEMAP=false
          echo "NODE_OPTIONS: $NODE_OPTIONS"
          npm run build || (echo "빌드 실패 - 오류 로그 확인" && exit 1)
        env:
          CI: false
      
      - name: Debug build output
        run: |
          echo "Build directory contents:"
          ls -la dist/ || echo "dist directory not found"
          if [ -f "dist/index.html" ]; then
            echo "Index.html found!"
            echo "Index.html 내용 미리보기:"
            head -n 20 dist/index.html
          else
            echo "Index.html NOT found!"
            echo "현재 디렉토리 구조:"
            find . -type f -name "*.html" | sort
          fi
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Create .nojekyll file
        run: |
          mkdir -p dist
          touch dist/.nojekyll
          echo ".nojekyll 파일 생성 완료"
      
      - name: Copy public files to dist
        run: |
          mkdir -p dist
          if [ -d "public" ]; then
            cp -r public/* dist/ 2>/dev/null || true
            echo "public 폴더의 파일을 dist로 복사했습니다"
          fi
      
      - name: Ensure 404.html exists
        run: |
          if [ ! -f "dist/404.html" ] && [ -f "public/404.html" ]; then
            cp public/404.html dist/404.html
            echo "public에서 404.html을 복사했습니다"
          elif [ ! -f "dist/404.html" ]; then
            echo "<!DOCTYPE html><html><head><meta charset='utf-8'><title>Page Not Found</title></head><body><h1>404 - Page Not Found</h1></body></html>" > dist/404.html
            echo "기본 404.html을 생성했습니다"
          else
            echo "404.html이 이미 dist 폴더에 존재합니다"
          fi
      
      - name: List dist directory contents
        run: |
          echo "최종 dist 디렉토리 내용:"
          ls -la dist/
          echo "HTML 파일 목록:"
          find dist -name "*.html" | sort
          echo "JS 파일 목록:"
          find dist -name "*.js" | wc -l
          echo "CSS 파일 목록:"
          find dist -name "*.css" | wc -l
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './dist'
        id: upload-artifact
        
      - name: Debug upload artifact
        if: always()
        run: |
          echo "Artifact upload status: ${{ steps.upload-artifact.outcome }}"
          echo "Artifact upload conclusion: ${{ steps.upload-artifact.conclusion }}"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
